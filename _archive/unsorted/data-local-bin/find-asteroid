#!/usr/bin/env python

# find-asteroid: Finds moving objects by comparing three images, removing fixed stars, and fitting for rectilinear motion in remaining objects

import sewpy, sys, os
import numpy as np
from astropy.table import Table
from astropy.coordinates import SkyCoord 
from astropy.io import fits
from optparse import OptionParser

vers ='%prog 1.0 5-Dec-2016'

def get_args():
	global parser
	parser = OptionParser(description='%prog  finds moving object given exactly three input images', version = vers)
	parser.add_option('-f', dest = 'ftsfiles', metavar='FITS images'  , action = 'store', default = '', help = 'comma-separated list of images [required]')
	parser.add_option('-m', dest = 'min_mag', metavar='Minimum mag.'  , action = 'store', type=float, default = 21.0, help = 'Minimum magnitude [default 21.0]')
	parser.add_option('-v', dest = 'verbose', metavar='Verbose', action = 'store_true', default = False, help = 'Verbose output')
	return parser.parse_args()

def hdr_info(fitsname):
	# Returns header info, substituting default values for zmag if needed
	hdr = fits.open(fitsname)[0].header
	filter = hdr['FILTER'][0]
	z = hdr['AIRMASS']
	exptime = hdr['EXPTIME']
	if filter == 'G': 
		k = 0.28
	elif filter == 'R': 
		k = 0.13
	elif filter == 'W':
		k = 0.05
	elif filter == 'N':
		k = 0.3
	elif filter == 'B':
		k = 0.35
	else:
		k = 0.2
	if 'ZMAG' in hdr:
		zmag = hdr['ZMAG']
	else:
		if filter == 'B': 
			zmag = 20.0
		elif filter == 'G': 
			zmag = 21.05
		elif filter == 'R':
			zmag = 20.20
		elif filter == 'W':
			zmag = 20.65
		elif filter == 'N':
			zmag = 21.8
		else:
			zmag = 20.
	
		print('WARNING: No Zero-point magnitude in header, using assumed zmag = %.2f , k = %.2f based on filter %s' % (zmag, k, filter))
	return zmag, k, exptime, z


def get_stars(fitsname,theta_max, min_mag):
	'''
	Uses sewpy to retrieves star positions, fluxes from Table T, 
	omitting any with flags != 0, theta > theta_max 
	'''
	zmag, k, exptime, z = hdr_info(fitsname)
	out = sew(fitsname)
	T = out["table"] # this is an astropy table
	adu = T['FLUX_BEST']
	adu = [x/exptime for x in adu]
	mag = zmag - 1.091*np.log(adu) - z * k
	N = len(T); RA_deg = []; Dec_deg  = []; Coords = []; Radius = []; Mag = []
	Flag = T['FLAGS']; radius = T['FLUX_RADIUS']
	for n in range(N):
		if Flag[n] == 0 and radius[n] < theta_max and mag[n] < min_mag:
			ra_deg  = T['ALPHA_J2000'][n]
			dec_deg = T['DELTA_J2000'][n]
			RA_deg.append(ra_deg); Dec_deg.append(dec_deg)
			Coords.append(SkyCoord(ra_deg,dec_deg,unit='deg'))
			Mag.append(mag[n])
			Radius.append(radius[n])
	RA_deg, Dec_deg, Coords, Mag, Radius = list(zip(*sorted(zip(RA_deg, Dec_deg, Coords, Mag, Radius) ) )) # Sort on RA
	return RA_deg, Dec_deg, Coords, Mag, Radius

def chisq(ra,dec,t):
	# Calculates linear fit and chi-square to ra vs time, dec vs. time, assuming origin is at first point
	ra = np.array(ra); dec = np.array(dec)
	dt = t[1:] - t[0]
	ra_dot = ( np.sum( ra[1:]*dt) -  ra[0]*np.sum(dt) ) / np.sum(dt**2)
	dec_dot = ( np.sum(dec[1:]*dt) - dec[0]*np.sum(dt) ) / np.sum(dt**2)
	ra_mod  =  ra[0] + ra_dot * (t - t[0])
	dec_mod = dec[0] + dec_dot * (t - t[0])
	chisq = (1./(len(t)-2)) * np.sum( (ra_mod - ra)**2  + (dec_mod - dec)**2 )
	return chisq, ra_dot, dec_dot

def compare_2fields(j, k):
	# Returns indices of stars in field j that are and are not in field k
	global Coords, Nstars, max_sepn
	ra0 = np.array([s.ra.deg for s in Coords[j]]) ; dec0 = np.array([s.dec.deg for s in Coords[j]])
	ra1 = np.array([s.ra.deg for s in Coords[k]]) ; dec1 = np.array([s.dec.deg for s in Coords[k]])
	indices_match = []; indices_nomatch = []
	for i in range(Nstars[j]):	
		dra = np.abs(ra1-ra0[i]); ddec = np.abs(dec1-dec0[i])
		s = np.sqrt(dra**2 + ddec**2)
		found = np.any(s < max_sepn) 
		if found:
			indices_match.append(i)
		else:
			indices_nomatch.append(i)
	return indices_match, indices_nomatch

def find_no_match():
	# Find indices of stars in fields  that are not in either of the other 2 fields		
	dum,no_match01 = compare_2fields(0,1); dum,no_match02 = compare_2fields(0,2)
	no_match0 = list(set(no_match01).intersection(no_match02))
	dum,no_match10 = compare_2fields(1,0); dum,no_match12 = compare_2fields(1,2)
	no_match1 = list(set(no_match10).intersection(no_match12))
	dum,no_match20 = compare_2fields(2,0); dum,no_match21 = compare_2fields(2,1)
	no_match2 = list(set(no_match20).intersection(no_match21))
	return [no_match0,no_match1,no_match2]

# ======= MAIN =============

max_sepn = 1/3600.  # Max separation for match, deg
theta_max = 1.0     # Set largest allowable star width [pixels

# Parse command line arguments
(opts, args) = get_args()
ftsfiles  = opts.ftsfiles.split(',')
Nfts = len(ftsfiles)
if len(ftsfiles) != 3:
	sys.exit('Exactly 3 FITS image names (comma separated) need to be given (option -f), try again') 
min_mag = opts.min_mag
verbose = opts.verbose


# Define Sextractor dictionary items to retrieve
sew = sewpy.SEW(params=["ALPHA_J2000", "DELTA_J2000", "FLUX_RADIUS(3)", "FLUX_BEST", "FLAGS"],
        config={"DETECT_MINAREA":5, "PHOT_FLUXFRAC":"0.3, 0.5, 0.7"})

# Loop through FITS files, getting lists of star positions and fluxes
Coords = []; Coords_hms= []; ADU = []; Nstars = []; Radius =[]; Mag = []; jd  = []; RA_deg = []; Dec_deg = []
j = 0
for ftsfile in ftsfiles:	
	if not os.path.isfile(ftsfile): sys.exit('File %s not found, exiting' % ftsfile)
	hdr = fits.open(ftsfile)[0].header
	jd.append(hdr['JD'])
	ra_deg, dec_deg, coords, mag, radius = get_stars(ftsfile,theta_max, min_mag)	
	Radius.append(radius)
	Mag.append(mag); RA_deg.append(ra_deg); Dec_deg.append(dec_deg)
	Coords.append(coords)
	c = [s.to_string(style ='hmsdms', precision=2, sep=':', decimal=False) for s in coords]
	Coords_hms.append(c)
	Nstars.append(len(mag))
	print('%i stars found in FITS image %s' % ( Nstars[j], ftsfile ))
	j+= 1

print()
no_match = find_no_match()

if verbose:
	# Print all stars found in each field
	for k in range(3):
		print('Field %i stars' % k)
		for j in range(Nstars[k]):
			print('%s   %.2f' % (Coords_hms[k][j], Mag[k][j]))
		print()

	# Print star in each field that have no matching stars
	for k in range(3):
		print('Image: %s - stars with no matches' % ftsfiles[k])
		no_match[k].sort()
		for j in no_match[k]:
			print('%s   %.2f' % (Coords_hms[k][j], Mag[k][j]))

# Build lists of star coordinates [deg] for non-matching stars in each field
ra0 = []; dec0 = []; ra1 = []; dec1 = [] ; ra2 = []; dec2 = [];
for k in no_match[0]:
	ra0.append(RA_deg[0][k]); dec0.append(Dec_deg[0][k])
for k in no_match[1]:
	ra1.append(RA_deg[1][k]); dec1.append(Dec_deg[1][k])
for k in no_match[2]:
	ra2.append(RA_deg[2][k]); dec2.append(Dec_deg[2][k])

# Print solutions for any no-match stars sets that lie along a linear trajectory 
print() 
print('Searching for moving objects')
for k0 in range(len(ra0)):
	for k1 in range(len(ra1)):
		for k2 in range(len(ra2)):
			ra =  np.array( [  ra0[k0],  ra1[k1],  ra2[k2] ])
			dec = np.array( [ dec0[k0], dec1[k1], dec2[k2] ])
			t =   np.array(     [jd[0],    jd[1],    jd[2] ])
			chi,ra_dot,dec_dot = chisq(ra,dec,t)
			chi *= 1.e6
			if chi< 0.1:
				print('Found possible moving object, unnormalized chisq = %.2e' % (chi))
				print('Image %s: %10.4f %s  %.2f' % ( ftsfiles[0], jd[0], Coords_hms[0][no_match[0][k0]], Mag[0][no_match[0][k0]] ))
				print('Image %s: %10.4f %s  %.2f' % ( ftsfiles[1], jd[1], Coords_hms[1][no_match[1][k1]], Mag[1][no_match[1][k1]] ))
				print('Image %s: %10.4f %s  %.2f' % ( ftsfiles[2], jd[2], Coords_hms[2][no_match[2][k2]], Mag[2][no_match[2][k2]] ))
				print('Motion: RA = %.1f\"/hr, Dec = %.1f\"/hr' % (ra_dot*3600/24., dec_dot*3600/24.))
				print()

			
