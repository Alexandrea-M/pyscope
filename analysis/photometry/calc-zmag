#!/usr/bin/env python 

# calc-zmag: 
# Calculates the zero-point magnitude for a given filter by comparing raw sextractor magnitudes to cataloged magnitudes from SDSS
# The calculation solves for the zero-point using a chi-square minimization of the difference between the observed and reference magnitudes
# THe zero-point solution and uncertainty are optionally written into the FITS header and plotted

# N.B. Requires sextractor (command line sex, config file location defaults to /usr/local/sextractor/default.sex, can be edited below)

# v. 2.0 14 April 2016 RLM
# v. 2.2 27 May 2016: use Sloan i for W filter, changed outlier criterion to 3 sigma, solve for zp using median, change -s default to 5.
# v. 2.3 31 May 2016: Fixed major bug in Sloan lookup function def. Also fixed	minor other bugs.
# v. 2.4 03 Jun 2016: minor edits to allow running from cron and/or remote with no X: added mpl.use('agg'), 
#					  added full pathname to sex command and sexout file 
# v. 2.41 07 Dec 2016 Change SNR plot to extend to mag 21.
# v. 2.42 11 Dec 2016 Change default sigma to 3, add color correction coefficients k_color_(g,r)
# v. 2.43 12 Dec 2016 Fix range of SNR plot from 0 to 3 (log); add another column to listing: diff/sigma
# v. 2.44 27 Jan 2017 Skip sexout lines with 0 fluxerr
# v. 2.45 15 Feb 2017 don't do solution if ZMAG keyword already exists, unless option -o (overwrite) selected; Make -w default to true
# v. 2.46 21 Feb 2017 test whether a FITS file is valid and has a WCS solution, skip if not
# v. 2.50 11 Mar 2017 test for bogus (nan) v values in get_sexinfo, skip if found
# v. 2.51 26 Mar 2017 skip get_sexinfo if flux = 0 
# v. 2.60 31 May 2017 Change plot limits; add k', k'' to plot title; change RN = 400 to agree with observed SNR (pattern noise!)
# v. 2.61 09 Jun 2017 Change so that star list is verbose [requires -v]
# v. 2.70 18 Oct 2017 Recode LSQ fit for sky magnitude; change range of ZP mag to 20-23; remove correction for airmass
# v. 2.80 12 Nov 2017 Add param to adjust outlier level 
# v. 2.81 04 Feb 2018 Change camera aparms (RN, DC) for IKON L936 camera
# v. 2.82 17 Apr 2018 Change range of ZP plot range to center on 22.5 (new camera); change plot size and fonts
# v. 2.83 05 Oct 2019 Changerange of ZP plot to center on 21.0 (new gain setting in IKON camera), change color plot to +/-2 mags
# v. 3.0  26 Jan 2022 Add prettytable formatting; Change ZP on zp+/-1; Limiting SDSS mag. 21 (was 20); Add sky stats to list,plot
# v. 3.01 29 Jan 2022 Add cache = False to SDSS lookup (was filling home directory)

vers ='%prog 3.01 29 Jan 2022'

import sys,os,glob, warnings
import numpy as np
from scipy.optimize import minimize
from astropy.coordinates import SkyCoord
from astropy import units as u
from astropy.io import fits
from astropy.io.fits import getheader, getdata, update, setval
from astropy.stats import sigma_clipped_stats
import matplotlib as mpl
mpl.use('Agg')
from astroquery.sdss import SDSS
import matplotlib.pyplot as plt
from optparse import OptionParser
from prettytable import PrettyTable, PLAIN_COLUMNS,MARKDOWN,SINGLE_BORDER,DOUBLE_BORDER



# Avoid annoying warning about matplotlib building the font cache
warnings.filterwarnings('ignore')

def get_args():
	usage = "Usage: %prog [options] FITS files[s]"
	parser = OptionParser(description='Program %prog' ,usage=usage, version = vers)
	parser.add_option('-f', dest = 'filter', metavar='Filter', action = 'store', default = 'G', help = 'Filter name [default G]') 
	parser.add_option('-s', dest = 'sigma', metavar='sigma'	 , action = 'store', type=float, default = 3, help = 'Sextractor detection threshold [default 3 sigma]')
	parser.add_option('-t', dest = 'outlier', metavar='outlier'	 , action = 'store', type=float, default = 3, help = 'Outlier trim threshold [default 3 sigma]')
	parser.add_option('-d', dest = 'delta', metavar='delta'	 , action = 'store', type=float, default = 5, help = 'Sextractor position tolerance, arcsec [default 5]')
	parser.add_option('-o', dest = 'overwrite', metavar='Overwrite', action = 'store_true', default = False, help='Overwrite previous solution (default False)')
	parser.add_option('-S', dest = 'sloan', metavar='Sloan', action = 'store', default = '', help='Override FITS filter name, use specified filter for ref. mag. e.g. r')
	parser.add_option('-p', dest = 'plot', metavar='plot', action = 'store_true', default = False, help='Plot solution')
	parser.add_option('-v', dest = 'verbose', metavar='Verbose', action = 'store_true', default = False, help='Verbose output')
	parser.add_option('-w', dest = 'write', metavar='Write', action = 'store_true', default = True, help='Write ZP, ZPERR keywords to FITS header [default True]')
	
	return parser.parse_args()
	

def get_hdrdata(ftsfile):
	hdr = getheader(ftsfile, 0)
	jd = hdr['JD']
	date = hdr['DATE-OBS']
	exptime = hdr['EXPTIME']
	filter =  hdr['FILTER'][0]
	airmass = hdr['AIRMASS']
	if 'ZMAG' in hdr:
		zmag = hdr['ZMAG']
	else:
		zmag = ''
	if 'EGAIN' in hdr:
		egain = hdr['EGAIN']
	else:
		egain = 1.00
	nbin = hdr['XBINNING']	# Assume same for y binning
	arcsec_pixel = np.abs(hdr['CDELT1']*3600.)
	return jd, date, exptime, filter, arcsec_pixel, nbin, airmass, zmag, egain

def get_sexinfo(sexname, exptime, arcsec_pixel):
	fn = open(sexname,'r')
	lines = fn.readlines()[15:]
	Nr = []; Ra = []; Dec = []; Snr = []; Flux = []; Fluxerr = []; Fwhm = []; V = []; Verr = []
	for line in lines:
		nr, flux, fluxerr, dum, dum, x_pix, y_pix, ra_deg, dec_deg, profile_x, profile_y, pa, fwhm_pixel, dum, flag = [float(x) for x in line.split()]
		v =	 - 2.5*np.log10(flux/exptime)
		if np.isnan(v) or flux == 0 or fluxerr == 0: continue
		snr = flux/fluxerr
		verr =	2.5*(fluxerr/flux)	# Expanding log10(1+x) ~ 2.5x
		Ra.append(ra_deg); Dec.append(dec_deg); Flux.append(flux)
		Fluxerr.append(fluxerr); Fwhm.append(fwhm_pixel * np.abs(arcsec_pixel))
		Snr.append(snr); V.append(v); Verr.append(verr)
	fn.close()
	
	# Trim list to stars by restricting fwhm values
	fwhm_min = 1.4; fwhm_max = 4.0
	A = list(zip(Ra, Dec, Snr, Flux, Fluxerr, Fwhm, V, Verr)); B = []
	for j in range(len(A)):
		if fwhm_min < A[j][5] < fwhm_max: 
			B.append(A[j])
	Ra, Dec, Snr, Flux, Fluxerr, Fwhm, V, Verr = list(zip(*B))
	V = np.array(V); Verr= np.array(Verr)
	return Ra, Dec, Snr, Flux, Fluxerr, Fwhm, V, Verr

def solve_zp(Mag_ref, Mag_obs, Mag_obs_err):
	zp =np.median(Mag_ref - Mag_obs)
	success= True; chi = 1.0
	return zp, success, chi
	
def calc_snr(mag_star, mag_sky):
	''' SNR of a star, given star magnitude, exp. time, zero point mag, camera parameters, and sky brightness
	gain is in e/ADU; fwhm is in arcsec; plate_scale is arcsec/binned pixel '''
	global RN, DC, gain, arcsec_pixel, nbin, zp, exptime, fwhm
	# Binned pixels in FWHM
	npix = (fwhm/arcsec_pixel)**2
	star_counts = gain * exptime * (10 ** ( 0.4*(zp - mag_star) ) )
	# mag_sky is in magnitudes per square arcsec
	sky_counts =  gain * exptime * fwhm**2 * (10 ** ( 0.4*(zp - mag_sky) ) )
	# Dark current is in e/pixel/sec
	dc_counts =   DC   * exptime * (npix*nbin)**2
	# All counts in electrons
	snr = star_counts / np.sqrt( star_counts + sky_counts  + dc_counts + RN**2 )
	return snr
	
def solve_mag_sky(Snr_obs):
	mag_sky = 20	# Initial guess for sky background (mag per sec^2)
	res = minimize(chisq_snr, mag_sky, args = (Snr_obs, Mag_obs), method = 'Nelder-Mead' )
	mag_sky = res.x[0]; success = res.success
	return mag_sky, success

def chisq_snr(mag_sky,*args):
	Snr_obs, Mag_obs = args
	Snr_mod = calc_snr(Mag_obs, mag_sky)
	diff_wt = (Snr_obs - Snr_mod) /Snr_mod
	chisq = np.sum( np.abs(diff_wt))
	return chisq
	
def fchisq(zp, *args):
	Mag_ref, Mag_obs, Mag_obs_err = args
	if len(Mag_ref) > 0:
		chisq = np.sum( (( Mag_ref - (Mag_obs + zp)) / Mag_obs_err)**2 ) / len(Mag_ref)
	else:
		chisq = 1.e99
	return chisq

def get_sdss_magnitudes(ra,dec):
	# Query SDSS online photometric catalog for u,g,r,i,z magnitudes; ra,deg in degrees (ICRS, 2000)
	pos = SkyCoord(ra, dec, unit =(u.deg,u.deg), frame ='icrs')
	ids = SDSS.query_region(pos,radius=5*u.arcsec, cache=False, fields=['ra','dec','clean','u','g','r','i','z']) # defaults to 2 arcsec search
	u1 = g = r = i = z= np.nan
	
	if ids	!= None:
		for id in ids:
			if id['clean'] == 1 and id['g'] < 21.0:	 # Only accept photometry with clean flags and assume faint stars are incorrect ID's
				u1 = id['u']; g = id['g']; r = id['r']; i = id['i']; z = id['z']
				return u1, g, r, i, z
	return u1,g,r,i,z

def trim(indices,A):
	# Trims arrays packed in A, dropping elements with given indices
	B = []
	for a in A:
		B.append(np.delete(a, indices))
	return B

def solve_k_color(Mag_obs, Mag_obs_err, Mag_ref, Color):
	k_color = 0.1 # initial guess
	res = minimize(kcolor_chisq,k_color,args=(Mag_obs, Mag_obs_err, Mag_ref, Color),  method = 'Nelder-Mead')
	k_color = res.x[0]; success = res.success
	return k_color, success

def kcolor_chisq(k_color,*args):
	Mag_obs, Mag_obs_err, Mag_ref, Color= args
	diff_wt = (Mag_obs + k_color*Color - Mag_ref) / Mag_obs_err
	chisq = np.sum( diff_wt**2 )
	return chisq

def sigma_mark(sigma):
	if sigma < 2.0:
		mark = '   '
	elif 2.0 <= sigma <= 2.5:
		mark = '*  '
	elif  2.5 < sigma <= 3.0:
		mark = '** '
	elif sigma > 3.0:
		mark = '***'
	return mark

# ======== MAIN ================

# Sextractor config file path
sex_path	= '/usr/local/sextractor/default.sex'

# Camera parameters SBIG AC4040 FSI 
gain_unbinned = 1.05 # e/ADU 
RN = 3.7    # e, From manufacturers spec sheet
DC = 0.3    # e/unbinned pixel/sec at -20 C

# Extinction coefficients 
k_g = 0.28; k_r = 0.11

k_color_g = 0.10; k_color_r = 0.10

# Get command  line arguments, assign parameter values
(opts, args) = get_args()

Ftsfiles = args[0]				   # FITS input file mask (either single file or wildcard - parsed by glob)
Filter = opts.filter[0].upper()	   # Filter name (convert o upper if needed)
detect_threshold = opts.sigma	   # Sextractor detection threshold [sigma]
outlier_threshold = opts.outlier # Threshold level to reject a star if obs-calc > threshold (sigma)
delta = opts.delta/3600.		   # Sextractor Tolerance for matching star positions [deg]
Sloan =	 opts.sloan 
if Sloan != '': 
	Sloan = opts.sloan[0].upper()  # Override FITS image filter name, use specified filter magnitude for reference mag.
plot = opts.plot				   # Plot various things
overwrite = opts.overwrite		   # Overwrite: redo solution even if a ZMAG header keyword was found
verbose = opts.verbose			   # Print diagnostics, more
write_zmag = opts.write			   # Write ZMAG, ZMAGERR keywords to FITS file

# Check if inputs are valid
Sloan_Filters = ['U','B','G','R','I','Z']
if Sloan != '' and Sloan not in Sloan_Filters: sys.exit('User-specified Sloan filter %s not valid, exiting' % Sloan)

# Spin through FITS Files: run sextractor, generate output files, get header info, fill arrays, solve for zero-point magnitude
Zp = []; Zperr = []; Diff = []; Mag_obs_all = []
for ftsfile in glob.glob(Ftsfiles):
	
	# Make sure FTS file is valid and has a WCS solution, skip if not
	try:
	    hdr = getheader(ftsfile, 0)
	except:
	    print('Cannot retrieve header information from %s, skipping' % ftsfile)
	    continue
	if 'CRVAL1' not in hdr:
		print('No WCS in %s, skipping' % ftsfile)
		continue
	
	# Get useful header info [NB not currently using nbin]. Note: EGAIN parameter doesn't seem to be correct, so use gain at top of program
	jd, date, exptime, filter, arcsec_pixel, nbin, airmass, zmag, do_not_use_this_gain = get_hdrdata(ftsfile)
	gain = gain_unbinned *np.sqrt(nbin)
	
	# If image has wrong filter, skip
	if filter != Filter:
		if verbose: print('%s: Wrong filter [expecting %s, got %s], skipping' % (ftsfile,Filter,filter))
		continue
	if zmag != '' and not overwrite:
		print('%s: Zero-point solution found (ZMAG = %.2f), skipping (use -o to force new solution)' % (ftsfile,zmag))
		continue
	# Choose  Sloan filter to use for calibration: default to filter in FITS header, but user can override
	if Sloan != '':
		sloan_filter = Sloan
	else:
		sloan_filter = filter

	# Get statistics of the background
	im = getdata(ftsfile)
	bkgrnd_mean, bkgrnd_median, bkgrnd_std = sigma_clipped_stats(im, sigma=3.0)

    # Run sextractor
	sexname = os.path.abspath(ftsfile).split('.')[0] + '.sexout'
	if verbose: print('Running sextractor on %s with detection threshold = %.1f sigma' % (ftsfile, detect_threshold))
	os.system('sex %s -c %s -CATALOG_NAME %s -DETECT_THRESH %.1f -VERBOSE_TYPE QUIET' \
	% (ftsfile, sex_path, sexname, detect_threshold) )
	
	# Get position, magnitude info for each listed star in output file
	Ra_obs, Dec_obs, Snr, Flux, Fluxerr, Fwhm_obs, Mag_obs, Mag_obs_err = get_sexinfo(sexname, exptime, arcsec_pixel)
	nobs = len(Ra_obs)
	if verbose: print('Sextractor found %i stars' % nobs)
	
	# For each star in sextractor list retrieve SDSS photometry
	Mag_ref = np.full(nobs, np.nan); Color = np.full(nobs, np.nan)
	if verbose: print('Looking up observed stars in SDSS database...')
	for j in range(nobs):
		u1, g, r, i, z = get_sdss_magnitudes(Ra_obs[j], Dec_obs[j])
		Color[j] = g - r
		if sloan_filter == 'U': Mag_ref[j] = u1
		if sloan_filter == 'B': Mag_ref[j] = b
		if sloan_filter == 'G': Mag_ref[j] = g
		if sloan_filter == 'R': Mag_ref[j] = r
		if sloan_filter == 'I': Mag_ref[j] = i
		if sloan_filter == 'Z': Mag_ref[j] = z
			
	# Remove stars that weren't found in SDSS
	A = [Ra_obs, Dec_obs, Snr, Flux, Fluxerr, Fwhm_obs, Mag_obs, Mag_obs_err, Mag_ref, Color]
	indices = np.where(np.isnan(Mag_ref))[0]
	Ra_obs, Dec_obs, Snr, Flux, Fluxerr, Fwhm_obs, Mag_obs, Mag_obs_err, Mag_ref, Color = trim(indices, A)
	if verbose: print('Found %i stars in SDSS lookup' % len(Ra_obs))
	if len(Ra_obs) == 0:
		print('No stars found in SDSS, skipping')
		continue
	
	# Correct for extinction
	'''
	if filter == 'G':
		Mag_obs -= k_g * airmass - k_color_g * Color
	elif filter == 'R':
		Mag_obs -= k_r * airmass - k_color_r * Color
	'''
	
	# Solve for zero-point magnitude, assign RMS 
	zp, success, chi = solve_zp(Mag_ref, Mag_obs, Mag_obs_err)
	zperr = (1./len(Mag_ref)) *np.sqrt( np.sum( (Mag_obs - Mag_ref)**2) ) # RMS difference
	
	'''
	# find color correction coefficient using initial zp solution
	k_color_g, success_k = solve_k_color(Mag_obs + zp, Mag_obs_err, Mag_ref, Color)
	if not success_k:
		print 'Warning: Color correction failed, ignoring correction'
		k_color_g = 0.0
	else:
		print 'k_color_g = %.2f' % k_color_g
	
	'''
	
	# Remove outliers (>3 sigma)
	A = [Ra_obs, Dec_obs, Snr, Flux, Fluxerr, Fwhm_obs, Mag_obs, Mag_obs_err, Mag_ref, Color]
	indices = np.where(np.abs(Mag_ref - (Mag_obs+zp) ) > outlier_threshold *Mag_obs_err)[0]
	Ra_obs, Dec_obs, Snr, Flux, Fluxerr, Fwhm_obs, Mag_obs, Mag_obs_err, Mag_ref, Color = trim(indices, A)
	if verbose: print('Removed %i outlier stars exceeding %.1f sigma' % (len(indices), outlier_threshold))
	fwhm = np.median(Fwhm_obs)
	nstar = len(Mag_ref)
	
	# Re-solve of ZP, apply to observed raw magnitudes
	zp, success, chi = solve_zp(Mag_ref, Mag_obs, Mag_obs_err)
	
	Mag_obs += zp
	zperr = (1./nstar) *np.sqrt( np.sum( (Mag_obs - Mag_ref)**2) ) # RMS difference
	Zp.append(zp); Zperr.append(zperr)
	Diff = Mag_obs - Mag_ref

	# Solve for sky brightness,
	mag_sky, success_sky = solve_mag_sky(Snr)
	 
	# generate arrays for plotting
	mag_mod = np.linspace(14,21,100)
	snr_mod = calc_snr(mag_mod, mag_sky)
	T = PrettyTable()
	T.set_style(SINGLE_BORDER)
	t = ['N', 'RA(J2000) Dec(J2000)', 'RA[deg]', 'Dec[deg]', 'g-r', 'FWHM', 'SNR', 'ADU/s', '%s_obs' % filter, '%s_ref' % filter, 'Delta', 'Sigma','']
	T.field_names = t
	if success and verbose:
		print()
		print('%s  %9.3f  %1s filter ZP: %.2f +/- %.2f, Sky_mag = %.1f, Sky = %.1f ADU, Sky_RMS = %.1f' %  \
			(ftsfile, jd, filter, zp, zperr, mag_sky, bkgrnd_median, bkgrnd_std ))
		print()
		for j  in np.where(np.isfinite(Mag_obs))[0]:
			c = SkyCoord(Ra_obs[j],Dec_obs[j],unit=(u.deg, u.deg))
			coords = c.to_string(style ='hmsdms', precision=1, sep=':', decimal =False)
			sigma =	 abs(Diff[j])/Mag_obs_err[j] ; mark = sigma_mark(sigma)
			N =            '%3i' % (j+1)
			ra_deg  =    '%8.4f' % c.ra.deg
			dec_deg =    '%8.3f' % c.dec.deg
			color   =     '%.2f' % Color[j]
			FWHM    =     '%.1f' % Fwhm_obs[j]
			SNR     =     '%.1f' % Snr[j]
			ADU_sec =     '%.1f' % (Flux[j]/exptime)
			MAG_obs =     '%.2f +/- %.2f' % (Mag_obs[j],Mag_obs_err[j])
			MAG_ref =     '%.2f' % Mag_ref[j]
			DIFF =        '%.2f' % Diff[j]
			Sigma =       '%.1f' % sigma
			s = [N, coords, ra_deg, dec_deg, color, FWHM, SNR, ADU_sec, MAG_obs, MAG_ref, DIFF, Sigma,mark]
			T.add_row(s)
		T.align['SNR'] = 'r'
		T.align['ADU/s'] = 'r'
		print(T,'\n')
		
	# Write zeropoint value in header
	if write_zmag:
		setval(ftsfile,'ZMAG',	 value= float('%.2f' % zp),	   comment = 'Zero point magnitude', after ='BZERO')
		setval(ftsfile,'ZMAGERR',value= float('%.2f' % zperr),comment = 'Zero point RMS', after ='ZMAG')
		print('Added ZMAG, ZMAGERR keywords (%.2f +/- %.2f) to %s header' % (zp, zperr,ftsfile))
	else:
		print('Solution not written to FITS header, use option -w to write')
		
	if plot:
		plt.figure(figsize=(12,9))
		plt.suptitle('Iowa Gemini Robotic Telescope, Image: %s' % ftsfile, fontsize =16)
		
		xmin = 14; xmax = 21
		
		plt.subplot(221)
		y = Mag_obs+zp - Mag_ref
		plt.errorbar(Mag_ref, y, yerr=Mag_obs_err,fmt='ks')
		plt.title('Zero point solution, %s filter [ZP = %.2f +/- %.2f]' % (filter,zp,zperr),fontsize=9 )
		plt.ylabel('Observed - SDSS magnitude'); plt.xlabel('SDSS %s magnitude' % Filter) 
		plt.grid(True)
		plt.ylim(zp-1,zp+1)
		plt.plot((xmin,xmax),(zp,zp),'r-')

		plt.subplot(222)
		plt.errorbar(Color, Diff, yerr=Mag_obs_err,fmt='ks')
		plt.grid(True)
		plt.ylim(-2,2)
		if filter == 'G':
			plt.title(r'$\Delta$(%s) vs. Color [${k^{\prime}}_g=$%.2f, ${k^{\prime\prime}}_g=$%.2f]' % (filter, k_g, k_color_g),fontsize=9)
		elif filter == 'R':
			plt.title(r'$\Delta$(%s) vs. Color [$k_r=$%.2f]' % (filter,k_r),fontsize=9)
		else:
			plt.title(r'$\Delta$(%s) vs. Color' % filter,fontsize=9)
		plt.xlabel('Color index [Sloan g-r]'); plt.ylabel(r'$\Delta$ Magnitude') 
		
		plt.subplot(223)
		plt.semilogy(Mag_ref, Snr, 'bs')
		plt.semilogy(mag_mod, snr_mod, 'r-')
		plt.title(r'SNR vs %s mag [t = %i sec, sky = %.1f mag/arcsec$^2$] Sky: %.1f, $\sigma$: %.1f' % \
            (filter, exptime, mag_sky, bkgrnd_median, bkgrnd_std),fontsize=9 )
		plt.ylabel('Signal-to-Noise Ratio'); plt.xlabel('Sloan %s magnitude' % Filter) 
		plt.grid(True)
		plt.xlim(xmin,xmax); plt.ylim(1,1e3)
	
		plt.subplot(224)
		plt.plot(Mag_ref, Snr,	   'bs')
		plt.plot(mag_mod, snr_mod, 'r-')
		plt.title('SNR vs %s magnitude [linear]' % filter,fontsize=9)
		plt.ylabel('Signal-to-Noise Ratio'); plt.xlabel('%s magnitude' % Filter) 
		plt.grid(True)
		plt.xlim(xmin,xmax)
		plt.ylim(0,200)
		
		plotname = '%s-zp_plot.png' % ftsfile.split('.')[0]
		plt.savefig(plotname)
		print('Created plot file %s' % plotname)
		plt.show()






	
