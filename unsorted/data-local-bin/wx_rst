#!/usr/bin/env python

# Calculate the rise, transit, and set times at Winer Obs. for Sun or 
# user-specified source name on current day [default] or user-specified date

# RLM April 12 2008 - added sesame_resolve from KMI
# 13 Sept 2012 convert from pynova to pyephem, clean up code, add planets

import ephem as ep # pyephem library
from math import *
from sys import argv
import re
import urllib
import wx
import os.path

class SesameError(Exception): pass
class NameNotFoundError(Exception): pass

class MainWindow(wx.Frame):
	def __init__(self, filename='noname.txt'):
		super(MainWindow, self).__init__(None, size=(600,200))

### Make and place all the controls
		
		self.objectLabel = wx.StaticText(self, label="Object:")
		self.dateLabel = wx.StaticText(self, label="Date:")
		self.object = wx.TextCtrl(self, -1,style=wx.TE_RIGHT,size=wx.Size(250,22))
		self.date = wx.DatePickerCtrl(self, -1)
		self.submit = wx.Button(self, -1, "Search")
		self.output = wx.TextCtrl(self,style=wx.TE_MULTILINE|wx.TE_READONLY)

		self.sizer_ctrl = wx.GridBagSizer(vgap=10, hgap=10)
		self.sizer_main = wx.BoxSizer(wx.VERTICAL)

		self.sizer_ctrl.Add(self.objectLabel, pos=(0,0), flag=wx.ALIGN_CENTER)
		self.sizer_ctrl.Add(self.object, pos=(0,1), span=(1,2), flag=wx.EXPAND)
		self.sizer_ctrl.Add(self.dateLabel, pos=(1,0))
		self.sizer_ctrl.Add(self.date, pos=(1,1))
		self.sizer_ctrl.Add(self.submit, pos=(1,2), flag=wx.ALIGN_RIGHT)
#		self.sizer_ctrl.AddGrowableCol(2)
				
		self.sizer_main.Add(self.sizer_ctrl, border=5, flag=wx.EXPAND|wx.ALL)
		self.sizer_main.Add(self.output, proportion=1, flag=wx.EXPAND)

### Event Bindings
		self.object.Bind(wx.EVT_TEXT_ENTER, self.OnSubmit)
		self.submit.Bind(wx.EVT_BUTTON, self.OnSubmit)


### Create Menus		
		actionMenu = wx.Menu()
		item = actionMenu.Append(wx.ID_COPY, '&Copy\tCtrl+C', 'Copy selection to clipboard')
#		self.Bind(wx.EVT_MENU, self.OnCopy, item)
		item = actionMenu.Append(wx.ID_PASTE, '&Paste\tCtrl+V', 'Paste clipboard contents')
#		self.Bind(wx.EVT_MENU, self.OnPaste, item)
		actionMenu.AppendSeparator()
		item = actionMenu.Append(wx.ID_EXIT, 'E&xit', 'Terminate the program')
		self.Bind(wx.EVT_MENU, self.OnExit, item)

		helpMenu = wx.Menu()
		item = helpMenu.Append(wx.ID_HELP_CONTENTS, 'View &Help\tF1', 'Get help with this program')
#		self.Bind(wx.EVT_MENU, self.OnHelp, item)
		item = helpMenu.Append(wx.ID_ABOUT, '&About', 'Information about this program')
		self.Bind(wx.EVT_MENU, self.OnAbout, item)

		menuBar = wx.MenuBar()
		menuBar.Append(actionMenu, '&Action')
		menuBar.Append(helpMenu, '&Help')
		self.SetMenuBar(menuBar)

### Final Stuff
		super(MainWindow, self).SetTitle('RST - Rise Set Time')
		self.CreateStatusBar()
		self.SetSizerAndFit(self.sizer_main)
		self.SetSize(size=wx.Size(400,400))

	def OnAbout(self, event):
		dialog = wx.MessageDialog(self, 'Rise/Set Time Calculator\nVersion 1.0', 'About RST', wx.OK)
		dialog.ShowModal()
		dialog.Destroy()

	def OnExit(self, event):
		self.Close()
		
	def OnSubmit(self, event):
		searchtext = self.object.GetValue()
		if (searchtext == ''): return
		obsdate = str(self.date.GetValue().Format('%m/%d/%Y'))
		self.output.Clear()
		try:
			self.SetStatusText('Querying SIMBAD Server...')
			self.output.AppendText(calc_rst(searchtext,obsdate))
			self.output.ShowPosition(0)
		except NameNotFoundError:
			self.SetStatusText('Name not found by SIMBAD')
		except SesameError as e:
			self.SetStatusText('SIMBAD server error:', e)
		else:
			self.SetStatusText('')

# Nuts and Bolts

def sesame_resolve(name):  # This handy function from KMI
	url = "http://vizier.u-strasbg.fr/viz-bin/nph-sesame/-oI/SNV?"
	object = urllib.quote(name)
	ra = None
	dec = None
	identifiers = []
	try:
		simbad_lines = urllib.urlopen(url + object).readlines()
	except Exception, e:
		raise SesameError("Unable to connect to Sesame server", e)
	for line in simbad_lines:
		line = line.strip()
		if line.startswith("%J "):
			fields = re.split(r" +", line)
			try:
				ra = float(fields[1])/15.0 # raises ValueError, IndexError
				dec = float(fields[2]) # raises ValueError, IndexError
			except (ValueError, IndexError), e:
				raise SesameError("Error parsing Sesame response", e)
		if line.startswith("%I "):
			fields = line.split(" ", 1)
			try:
				identifiers.append(fields[1]) # raises IndexError
			except IndexError, e:
				raise SesameError("Error parsing Sesame response", e)
	if ra == None or dec == None:
		raise NameNotFoundError("Name not found by Sesame server")
	return (ra, dec, identifiers)

def set_object(objname):
	if any(objname.lower() == planet for planet in planets):
		i = planets.index(objname.lower())
		obj = ep_planets[i]
		obj.compute(winer)
		objra = obj.ra; objdec = obj.dec
		ids = ''
	else:
		(rahr, decdeg, ids) = sesame_resolve(objname)
		objra = hr2hms(rahr); objdec = deg2dms(decdeg)
		db_str = '%s,f|M|x,%s,%s,0.0,2000' % (objname,objra,objdec)
		obj = ep.readdb(db_str); obj.compute(winer)
	return objra,objdec,ids, obj

def hr2hms(rahr):
	rahms = str(ep.hours(rahr*pi/12))
	return rahms
	   
def deg2dms(decdeg):
	decdms = str(ep.degrees(decdeg*pi/180.))
	return decdms
	
def get_times(t):
	winer.date = t
	local =     str(ep.Date(winer.date - 7*ep.hour)).split()[1][0:8]
	ut =        str(t).split()[1][0:8]
	lst =       str(winer.sidereal_time()).split()[0][0:8]
	return local,ut,lst

def calc_rst(objname, ymd=""):
	if (ymd==''):
		winer.date = ep.now()
	else:
		winer.date = ymd

	# Define objname, objra, objdec, ids
	objra,objdec,ids,obj = set_object(objname)

	# Calculate JD and date strings
	jd_ep = float(ep.Date(winer.date)); jd = jd_ep + 2415020
	date_str = str(winer.date).split()[0]

	# Calculate local times of astronomical dusk, dawn on specified date 
	sun = ep.Sun()
	winer.horizon = twilight_elev
	sun.compute(winer)
	dawn = ep.Date(sun.rise_time - 7*ep.hour)  ; dusk = ep.Date(sun.set_time - 7*ep.hour)
	dawn_str = str(dawn).split()[1][0:8]; dusk_str = str(dusk).split()[1][0:8]

	out_str = 'Object = %s, Date: %s JD: %8.1f\n' % (objname, date_str,jd)
	out_str += 'RA(J2000): %s, Dec(J2000): %s\n\n' % (objra,objdec)
	out_str += 'Dusk, dawn: %s - %s MST\n\n' % (dusk_str, dawn_str)
	out_str += '  MST        UT        LST      Elevation\n'
	out_str += '-----------------------------------------\n' 

	# print hourly elevations and times when object is above min_elev and time is between dusk and dawn
	winer.horizon = min_elev
	winer.date = obj.rise_time
	nhr = 0 
	for n in range(0,24):
		obj.compute(winer)
		sun.compute(winer)
		eldeg = float(obj.alt)/deg
		elsun = float(sun.alt)/deg
		local,ut,lst = get_times(winer.date)
		if eldeg > float(min_elev) and elsun < float(twilight_elev): 
			out_str += '%s   %s  %s      %4.1f\n' % (local, ut, lst, eldeg)
			nhr += 1
		winer.date += ep.hour

	# Warnings:  if object is unobservable on requested date, or if transit occours during day
	if nhr == 0:
		out_str += '\nWarning: Object %s not observable between dusk and dawn on %s\n' % (objname, str(winer.date).split()[0])
	else:
		out_str += '\n%s is observable for about %i hours on %s\n\n' % (objname, nhr, date_str)
		winer.date = obj.transit_time
		sun.compute(winer); elsun = float(sun.alt)/deg
		if elsun > float(twilight_elev):
			t = str(ep.Date(winer.date - 7*ep.hour)).split()[1][0:8]
			out_str += '\nWarning: Transit occurs during daytime (%s MST), use LSTSTART option when schedling' % t
	if ids != '':
		out_str += "\nSource also known as:"
		out_str += '; '.join(ids)
		out_str += '\n'
	return out_str

# MAIN

deg = pi/180.

# List of planets (& Moon) known to ephem
planets =    ['moon',    'mercury',   'venus',   'mars',     'jupiter',    'saturn',    'uranus',    'neptune',    'pluto']
ep_planets = [ep.Moon(), ep.Mercury(), ep.Venus(), ep.Mars(), ep.Jupiter(), ep.Saturn(), ep.Uranus(), ep.Neptune(), ep.Pluto()]


min_elev = '+10'        # Define minimum observable elevation in degrees
twilight_elev = '-12'  # Define solar elevation at astronomical twilight, when roof opens

# Set observer circumstance to Winer Observatory 
winer  = ep.Observer()
winer.lat = ep.degrees(str(0.55265/deg))
winer.long = ep.degrees(str(-1.93035/deg))

app = wx.App(redirect=False,filename='logfile.txt')
frame = MainWindow()
frame.Show()
app.MainLoop()
