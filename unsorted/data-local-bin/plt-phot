#!/usr/bin/env python 

# plt-phot: 
# Computes photometric magnitudes using sextractor, plots
# Optionally checks magnitudes using SDSS

# N.B. Requires sextractor!
# [command line sex, config file location defaults to /usr/local/sextractor/default.sex]

# v. 1.0 RLM 22 April 2016

import sys,os,glob, warnings, re
import numpy as np
from scipy.optimize import minimize
from astropy.coordinates import SkyCoord
from astropy.time import Time
from astropy import units as u
from astropy.io import fits
from astropy.io.fits import getheader,update,setval
from astroquery.sdss import SDSS
import matplotlib.pyplot as plt
from matplotlib.pyplot import cm 
from optparse import OptionParser

# Avoid annoying warning about matplotlib building the font cache
warnings.filterwarnings('ignore')

# Sextractor config file path
sex_path    = '/usr/local/sextractor/default.sex'

def get_args():
	global parser
	parser = OptionParser(description='Program %prog',version = '%prog 1.0')
	parser.add_option('-f', dest = 'filter', metavar='Filter', action = 'store', help = 'Filter name [no default]') 
	parser.add_option('-s', dest = 'sigma', metavar='sigma'  , action = 'store', type=float, default = 5, help = 'Sextractor detection threshold [default 5]')
	parser.add_option('-c', dest = 'config', metavar='config'  , action = 'store', help = 'phot config file name [no default]')
	parser.add_option('-d', dest = 'datafile', metavar='datafile'  , action = 'store', default ='',help = 'Data file: CCV file of wavelengths, intensities')
	parser.add_option('-p', dest = 'plot', metavar='plot', action = 'store_true', default = True, help='Plot solution')
	parser.add_option('-S', dest = 'SDSS', metavar='SDSS', action = 'store_true', default = False, help='Search SDSS for magnitude')
	parser.add_option('-v', dest = 'verbose', metavar='Verbose', action = 'store_true', default = False, help='Verbose output')
	parser.add_option('-y', dest = 'ywidth', metavar='ywidth', action = 'store', type=float, default = 2.0, help= 'Differential plot width [mags, default 2 mag]')
	parser.add_option('-z', dest = 'zp', metavar='Zeropoint', action = 'store', type=float, default = -1, help= 'Zero-point magnitude, defaults to FITS header value')
	return parser.parse_args()
	
def get_hdrdata(ftsfile):
	hdr = getheader(ftsfile, 0)
	jd = hdr['JD']
	date = hdr['DATE-OBS']
	exptime = hdr['EXPTIME']
	filter =  hdr['FILTER'][0]
	airmass = hdr['AIRMASS']
	if 'ZMAG' in hdr:
		zp = hdr['ZMAG']; zperr = hdr['ZMAGERR']
	else:
		zp = 0 ; zperr =0
	nbin = hdr['XBINNING']  # Assume same for y binning
	arcsec_pixel = np.abs(hdr['CDELT1']*3600.)
	return jd, date, exptime, filter, arcsec_pixel, airmass, nbin, zp, zperr

def get_sexinfo(sexname, exptime, scale):
	fn = open(sexname,'r')
	lines = fn.readlines()[15:]
	Nr = []; Ra = []; Dec = []; Snr = []; Flux = []; Fluxerr = []; Fwhm = []; V = []; Verr = []
	for line in lines:
		nr, dum, dum, flux, fluxerr, x_pix, y_pix, ra_deg, dec_deg, profile_x, profile_y, pa, fwhm_pixel, dum, flag = [float(x) for x in line.split()]
		v =  - 2.5*np.log10(flux/exptime)
		snr = flux/fluxerr
		verr =  2.5*(fluxerr/flux)  # Expanding log10(1+x) ~ 2.5x
		Ra.append(ra_deg); Dec.append(dec_deg); Flux.append(flux)
		Fluxerr.append(fluxerr); Fwhm.append(fwhm_pixel * np.abs(scale))
		Snr.append(snr); V.append(v); Verr.append(verr)
	fn.close()
	# Trim list to stars by restricting fwhm values
	fwhm_min = 1.4; fwhm_max = 4.0
	A = zip(Ra, Dec, Snr, Flux, Fluxerr, Fwhm, V, Verr); B = []
	for j in range(len(A)):
		if fwhm_min < A[j][5] < fwhm_max: 
			B.append(A[j])
	Ra, Dec, Snr, Flux, Fluxerr, Fwhm, V, Verr = zip(*B)
	V = np.array(V); Verr= np.array(Verr)
	return Ra, Dec, Snr, Flux, Fluxerr, Fwhm, V, Verr

def get_sdss_magnitudes(ra,dec):
	# Query SDSS online photometric catalog for u,g,r,i,z magnitudes; ra,deg in degrees (ICRS, 2000)
	pos = SkyCoord(ra, dec, unit =(u.deg,u.deg), frame ='icrs')
	ids = SDSS.query_region(pos,radius=5*u.arcsec, fields=['ra','dec','clean','u','g','r','i','z']) # defaults to 2 arcsec search
	u1 = g = r = i = z= np.nan
	if ids  != None:
		for id in ids:
			if id['clean'] == 1 and id['g'] < 20.0:  # Only accept photometry with clean flags & reject very faint stars
				u1 = id['u']; g = id['g']; r = id['r']; i = id['i']; z = id['z']
			return u1, g, r, i, z
	return u1,g,r,i,z

def trim(indices,A):
	# Trims arrays packed in A, dropping elements with given indices
	B = []
	for a in A:
		B.append(np.delete(a, indices))
	return B

def get_magnitudes(Ra, Dec, Ra_sex, Dec_sex, max_diff, Mag_sex, Mag_sex_err):
	N1 = len(Ra) ; N2 = len(Ra_sex)
	Mag =  np.empty(N1) * np.nan ; Mag_err =  np.empty(N1) * np.nan
	for j in range(N1):
		for k in range(N2):
			dra = np.abs( Ra[j] -  Ra_sex[k]); ddec = np.max(Dec[j] - Dec_sex[k])
			if dra < max_diff and ddec < max_diff:
				Mag[j] = Mag_sex[k]; Mag_err[j] = Mag_sex_err[k]
	Mag = np.array(Mag); Mag_err = np.array(Mag_err)
	return Mag, Mag_err

def parse_config(config_file):
	Objects =[]; Filters = []; Ftsfiles = []; Mag_catalog = [] 
	Ra_hms = [] ; Dec_dms = [] ; Ra_deg = []; Dec_deg = []
	if not os.path.isfile(config_file):
		sys.exit('Configuration file %s does not exist, try again' % config_file)
	else:
		fn = open(config_file,'r')
		lines = fn.readlines()
		fn.close()
		for line in lines:
			line = line.split()
			if line  == []: 
				continue  # Skip blank lines
			elif line[0] == 'I':
				Ftsfiles = line[1]
			elif line[0] == 'S':
				object, ra_hms, dec_dms = line[1:4]
				Objects.append(object)
				Ra_hms.append(ra_hms); Dec_dms.append(dec_dms)
				c = SkyCoord(ra_hms,dec_dms,unit=(u.hourangle, u.deg), frame='icrs')
				Ra_deg.append(c.ra.deg) ; Dec_deg.append(c.dec.deg)
				if sdss:
					u1,g,r,i,z = get_sdss_magnitudes(c.ra.deg, c.dec.deg)
			 		Mag_catalog.append([u1,g,r,i,z])
			elif line[0] == 'T':
				title = " ".join(line[1:])
	return Objects, Ftsfiles, Ra_hms, Dec_dms, Ra_deg, Dec_deg, Mag_catalog, title


# ======== MAIN ================

# Max difference: config vs Sex position [deg]
max_diff = 5/3600. 

# Define dictionary of zero-point values and extinction for filters [guesses except for G, R]
Cal_Apogee = { 'N':(22.0,0.20), 'B':(21.5,0.35), 'G':(21.65,0.28), 'V':(20.6,0.20), 'R':(20.3,0.12), 'W':(19.8,0.05) }
Cal=   { 'N':(21.5,0.20), 'B':(21.0,0.35), 'G':(21.15,0.28), 'V':(20.6,0.20), 'R':(20.3,0.12), 'W':(19.8,0.05) }

# Get command  line arguments, assign parameter values
(opts, args) = get_args()

if not opts.filter:
	parser.error('filter (-f) not given, try again')
Filter = opts.filter[0].upper()    # Filter name (convert to upper if needed)

if not opts.config:
	parser.error('config file (-c) not given, try again')
config_file = opts.config

detect_threshold = opts.sigma      # Sextractor detection threshold [sigma]
plot = opts.plot                   # Plot various things
csvfile = opts.datafile            # optional CSV output filename
sdss = opts.SDSS                   # Look in SDSS for object magnitudes
verbose = opts.verbose             # Print diagnostics, more
ywidth = opts.ywidth               # Differentail plot width, magnitudes
zp_user = opts.zp                  # Zeropoint magnitude

# Parse configuration file
Objects, Ftsfiles, Ra_hms, Dec_dms, Ra_deg, Dec_deg, Mag_catalog, title = parse_config(config_file)
nstar = len(Objects)

JD = []; Date = []; Mag_all = []; Mag_err_all = []
#for Filter in Filters:
if 1 == 1:
	for ftsfile in glob.glob(Ftsfiles):
		
		# Get useful header info [NB not currently using nbin]
		jd, date, exptime, filter, scale, airmass, nbin, zp, zperr = get_hdrdata(ftsfile)

		# If wrong filter, skip
		if filter != Filter:
			if verbose: print '%s: Wrong filter [expecting %s, got %s], skipping' % (ftsfile,Filter,filter)
			continue

		# Run sextractor
		sexname = os.path.basename(ftsfile).split('.')[0] + '.sexout'
		if verbose: print 'Running sextractor on %s with detection threshold = %.1f sigma' % (ftsfile, detect_threshold)
		os.system('sex %s -c %s -CATALOG_NAME %s -DETECT_THRESH %.1f -VERBOSE_TYPE QUIET' \
		% (ftsfile, sex_path, sexname, detect_threshold) )
	
		# Get position, magnitude info for each listed star in output file
		Ra_sex, Dec_sex, Snr, Flux, Fluxerr, Fwhm_sex, Mag_sex, Mag_sex_err = get_sexinfo(sexname, exptime, scale)
		nobs = len(Ra_sex)
		if verbose: print 'Sextractor found %i stars' % nobs

		# Get magnitudes for target objects using position match to sextractor output
		Mag, Mag_err = get_magnitudes(Ra_deg, Dec_deg, Ra_sex, Dec_sex, max_diff, Mag_sex, Mag_sex_err)

		# Convert to magnitude by adding ZP and correcting for extinction. Use user-supplied ZP if specified
		if zp_user > 0:
			ZP = zp
			if verbose: print 'Using user-supplied zero-point (ZP = %.2f)' % ZP 
		elif zp > 0:
			ZP = zp
			if verbose: print 'Using zero-point found in FITS header: %.2f)' % ZP 
		else:
			ZP = Cal[Filter][0] 
			if nbin == 1: ZP += 0.5
			if verbose: print 'Using default zero-point for %s filter: (ZP = %.2f)' % (filter,ZP)
		k = Cal[Filter][1]
		Mag +=  ZP - k * airmass
		
		# Add to array, but only if all stars detected
		if not np.isnan(Mag).any():
			JD.append(jd); Date.append(date); Mag_all.append(Mag), Mag_err_all.append(Mag_err)

nepoch = len(JD)

# Sort by JD
JD, Date, Mag_all, Mag_err_all = (list(x) for x in zip(*sorted(zip(JD, Date, Mag_all, Mag_err_all ))))

# Convert to numpy arrays
Mag = np.array(Mag_all); Mag_err = np.array(Mag_err_all)

# Subtract reference star magnitudes 
Ref_Mag = Mag[:,-1]
Diff_mag = Mag - Ref_Mag[:,np.newaxis]

# Calculate median differential magnitudes
Medians = np.median(Mag, axis = 0)
Diff_mag += Medians[-1] 
Diff_err = np.sqrt(Mag_err**2 + Mag_err[-1]**2)


# Plot magnitudes
plt.figure(1, figsize=(12,8))
for j in range(nepoch):
	mjd = JD[j] - JD[0]
	color=iter(cm.rainbow(np.linspace(0,1,nstar+1)))
	for k in range(nstar):
		c = color.next()
		if j == 0:
			plt.errorbar(mjd, Mag[j][k], yerr = Mag_err[j][k], marker= 'd', markersize = 5, c=c, label = '%s' % Objects[k])
		else:
			plt.errorbar(mjd, Mag[j][k], yerr = Mag_err[j][k], marker= 'd', markersize = 5, c=c)
plt.title(title)
plt.legend(loc=2)
plt.ylim(20,10)
plt.ylabel('%s Magnitude' % Filter)
plt.xlabel('Days since JD %.5f (%s)' % (JD[0], Date[0]) )
plt.grid(True)
plot_title = '%s_lc-all.png' % (config_file.split('.')[0])
plt.savefig(plot_title)
if verbose: print 'Saved light curve plot as %s' % plot_title

# Separate plots for differential magnitudes
color=iter(cm.rainbow(np.linspace(0,1,nstar+1)))
for k in range(nstar):
	fig = plt.figure(j+1, figsize=(12,8))
	ax = fig.add_subplot(111)
	c = color.next()
	ymin = Medians[k] + ywidth/2.; ymax = ymin - ywidth
	for j in range(nepoch):
			mjd = JD[j] - JD[0]
			plt.errorbar(mjd, Diff_mag[j][k], yerr = Diff_err[j][k], marker= 's', markersize = 7, c='b')
	plt.suptitle(title, fontsize=14)
	plt.title('%s [%s %s] Filter = %s' % (Objects[k], Ra_hms[k], Dec_dms[k], Filter),fontsize=12 )
	plt.legend(loc=2)
	plt.ylim(ymin,ymax)
	plt.ylabel('%s Magnitude at Z=0' % Filter)
	if sdss:
		u,g,r,i,z = Mag_catalog[k]
		if   Filter == 'G': 
			txt = 'Sloan g = %.2f' % g
		elif Filter == 'R':
			txt = 'Sloan r = %.2f' % r
		else:
			txt = 'Sloan g = %.2f, r = %.2f, i = %.2f, z = %.2f,' % (g,r,i,z)
		plt.text(0.05, 0.05, txt, fontsize=12, transform=ax.transAxes, bbox=dict(facecolor='white', alpha=0.5))
	plt.xlabel('Days since JD %.5f (%s)' % (JD[0],Date[0]) )
	plt.grid(True)
	plot_title = '%s_%s_lc.png' % (Objects[k], Filter)
	plt.savefig(plot_title)
	print 'Saved differential l.c. plot %s' % plot_title
	plt.close(fig)


# write CSV output file if requested
if csvfile !=  '':	 
	fn = open(csvfile,'w')
	for j in range(nepoch):
		str1 =  ' '.join('%.3f %.3f  ' % (Mag[j][k], Mag_err[j][k]) for k in range(nstar)  ) 
		s = '%10.4f  %s\n' % (JD[j], str1)
		fn.write(s)
	print 'wrote CSV file %s' % csvfile
	fn.close()

